#!/usr/bin/env bash
set -euo pipefail

# Override default location of env file.
#export SSH_AGENT_CANON_ENV_FILE="${XDG_RUNTIME_DIR:-"/tmp/user/$(id --user)"}/ssh-agent-canonicalize/env.source"
# Default location of env file.
SSH_AGENT_CANON_DEFAULT_ENV_FILE="${XDG_RUNTIME_DIR:-"/tmp/user/$(id --user)"}/ssh-agent-canonicalize/env.source"

ENV_FILE="${SSH_AGENT_CANON_ENV_FILE:-"$SSH_AGENT_CANON_DEFAULT_ENV_FILE"}"

function canon_agent_pid() {
  # Contain changes to shell state in a subshell.
  (
    unset SSH_AGENT_PID SSH_AUTH_SOCK
    source "$ENV_FILE" >/dev/null
    # If the auth socket file is gone then the agent is unreachable. Even if it
    # was canonical at some point, there's no reason to keep it around any more.
    if [ -S "$SSH_AUTH_SOCK" ]; then
      echo ${SSH_AGENT_PID:-}
    fi
  )
}

function non_canon_agent_pids() {
  echo $(pgrep ssh-agent) | sed -e "s#\b$(canon_agent_pid)\b##"
}

function is_canon_agent_running() {
  ps -p "$(canon_agent_pid)" 2>/dev/null | grep -q ssh-agent
}

function kill_non_canon_agents() {
  non_canon_agent_pids | xargs --no-run-if-empty kill -TERM
}

function seed_agent() {
  # Contain changes to shell state in a subshell.
  (
    source "$ENV_FILE" >/dev/null
    if ! ssh-add -l 2>&1 >/dev/null; then
      ssh-add
    fi
  )
}

function canonicalize_ssh_agent() {
  # Ensure that we can create the env file before modifying any system state.
  mkdir -p "$(dirname "$ENV_FILE")"
  touch "$ENV_FILE"

  # Ensure that only the canonical instance of ssh-agent is running.
  kill_non_canon_agents
  if ! is_canon_agent_running; then
    ssh-agent >"$ENV_FILE"
  fi

  # Add default keys to the canonical instance of ssh-agent.
  seed_agent
}

function main() {
  # Redirect any output to stderr so stdout can always be safely eval'd.
  canonicalize_ssh_agent >&2

  # Write the canonical agent configuration to stdout.
  cat "$ENV_FILE"
}

main
